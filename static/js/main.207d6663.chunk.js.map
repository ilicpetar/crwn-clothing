{"version":3,"sources":["components/menu-item/menu-item.component.jsx","components/directory/directory.component.jsx","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MenuItem","title","imageUrl","size","className","style","backgroundImage","toUpperCase","Directory","state","sections","id","linkUrl","this","map","key","Component","HomePage","App","exact","to","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yWAkBeA,G,MAdE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACnC,OACE,yBAAKC,UAAS,UAAKD,EAAL,eACZ,yBACEC,UAAU,mBACVC,MAAO,CAAEC,gBAAgB,OAAD,OAASJ,EAAT,QAC1B,yBAAKE,UAAU,WACb,wBAAIA,UAAU,SAASH,EAAMM,eAC7B,0BAAMH,UAAU,YAAhB,gBC2COI,G,sNAjDbC,MAAQ,CACNC,SAAU,CACR,CACET,MAAO,OACPC,SAAU,oCACVS,GAAI,EACJC,QAAS,aAEX,CACEX,MAAO,UACPC,SAAU,uCACVS,GAAI,EACJC,QAAS,gBAEX,CACEX,MAAO,WACPC,SAAU,wCACVS,GAAI,EACJC,QAAS,kBAjBH,GAoBNX,MAAO,SACPC,SAAU,sCACVC,KAAM,QACNQ,GAAI,GAvBE,qBAwBA,SAxBA,wBAyBG,eAzBH,OA4BNV,MAAO,OACPC,SAAU,mCACVC,KAAM,QACNQ,GAAI,GA/BE,qBAgCA,SAhCA,wBAiCG,aAjCH,K,uDAsCV,OACE,yBAAKP,UAAU,kBACZS,KAAKJ,MAAMC,SAASI,KAAI,gBAAGb,EAAH,EAAGA,MAAOU,EAAV,EAAUA,GAAIT,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,KAAxB,OACvB,kBAAC,EAAD,CAAUY,IAAKJ,EAAIV,MAAOA,EAAOC,SAAUA,EAAUC,KAAMA,Y,GA3C7Ca,cCOTC,EARE,WACf,OACE,yBAAKb,UAAU,YACb,kBAAC,EAAD,Q,OCQSc,MAVf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,GAAG,IAAIC,UAAWJ,OCGnBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.207d6663.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./menu-item.styles.scss\";\r\n\r\nconst MenuItem = ({ title, imageUrl, size }) => {\r\n  return (\r\n    <div className={`${size} menu-item`}>\r\n      <div\r\n        className=\"background-image\"\r\n        style={{ backgroundImage: `url(${imageUrl})` }}></div>\r\n      <div className=\"content\">\r\n        <h1 className=\"title\">{title.toUpperCase()}</h1>\r\n        <span className=\"subtitle\">SHOP NOW</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuItem;\r\n","import React, { Component } from \"react\";\r\nimport MenuItem from \"./../menu-item/menu-item.component\";\r\n\r\nimport \"./directory.styles.scss\";\r\n\r\nclass Directory extends Component {\r\n  state = {\r\n    sections: [\r\n      {\r\n        title: \"hats\",\r\n        imageUrl: \"https://i.ibb.co/cvpntL1/hats.png\",\r\n        id: 1,\r\n        linkUrl: \"shop/hats\",\r\n      },\r\n      {\r\n        title: \"jackets\",\r\n        imageUrl: \"https://i.ibb.co/px2tCc3/jackets.png\",\r\n        id: 2,\r\n        linkUrl: \"shop/jackets\",\r\n      },\r\n      {\r\n        title: \"sneakers\",\r\n        imageUrl: \"https://i.ibb.co/0jqHpnp/sneakers.png\",\r\n        id: 3,\r\n        linkUrl: \"shop/sneakers\",\r\n      },\r\n      {\r\n        title: \"womens\",\r\n        imageUrl: \"https://i.ibb.co/GCCdy8t/womens.png\",\r\n        size: \"large\",\r\n        id: 4,\r\n        size: \"large\",\r\n        linkUrl: \"shop/womens\",\r\n      },\r\n      {\r\n        title: \"mens\",\r\n        imageUrl: \"https://i.ibb.co/R70vBrQ/men.png\",\r\n        size: \"large\",\r\n        id: 5,\r\n        size: \"large\",\r\n        linkUrl: \"shop/mens\",\r\n      },\r\n    ],\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"directory-menu\">\r\n        {this.state.sections.map(({ title, id, imageUrl, size }) => (\r\n          <MenuItem key={id} title={title} imageUrl={imageUrl} size={size} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Directory;\r\n","import React from \"react\";\r\nimport \"./homepage.styles.scss\";\r\nimport Directory from \"../../components/directory/directory.component\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div className=\"homepage\">\r\n      <Directory />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact to=\"/\" component={HomePage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}